{"version":3,"sources":["background2.jpg","components/STARFIGHTER-cover-red.jpg","components/header-bar.png","components/background2.jpg","components/HomeStyledComponents.jsx","components/Home.jsx","components/UpcomingDates.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js","components/band-pic1.png"],"names":["module","exports","HomeWrapper","Styled","div","MainContent","Title","RoundedPicture","img","props","picture","Home","Container","Row","Col","band1","UpcomingDates","Header","src","headerImage","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,wC,4ECA3CD,EAAOC,QAAU,IAA0B,yC,+lCCGpC,IAAMC,EAAcC,IAAOC,IAAV,KAOXC,EAAcF,IAAOC,IAAV,KAaXE,EAAQH,IAAOC,IAAV,KAQLG,EAAiBJ,IAAOK,IAAV,KAGC,SAAAC,GAAK,OAAIA,EAAMC,W,sDCnB9BC,EAAO,kBAEZ,kBAACT,EAAD,KACI,kBAACG,EAAD,KACI,kBAACC,EAAD,KAAO,4CACP,kBAACM,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACP,EAAD,CAAgBG,QAASK,OAE7B,kBAACD,EAAA,EAAD,qDCfPE,G,MAAgB,kBACzB,kBAACd,EAAD,KACI,kBAACG,EAAD,KACA,kBAACC,EAAD,KAAO,+CACP,+E,iBCCKW,EAAS,kBAEd,kBAACf,EAAD,KACI,yBAAKgB,IAAKC,IAAaC,MAAM,OAAOC,OAAO,WCOxCC,G,MAXH,kBAAO,6BACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCLoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1C,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.1e479204.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background2.587a7735.jpg\";","module.exports = __webpack_public_path__ + \"static/media/STARFIGHTER-cover-red.b884768e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/header-bar.5e433f0d.png\";","module.exports = __webpack_public_path__ + \"static/media/background2.587a7735.jpg\";","import Styled from '@emotion/styled';\nimport background from '../background2.jpg';\n\nexport const HomeWrapper = Styled.div`\n    background-color: black;\n    background-size: cover;\n    height: 100%;\n    overflow: hidden;\n`;\n\nexport const MainContent = Styled.div`\n    color: white;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n        flex-direction: column;\n    min-height: 100vh;\n    max-width: 75%;\n    margin-left: 12.5%;\n    font-family: 'Oswald', sans-serif;\n\n`;\n\nexport const Title = Styled.div`\n    color: yellow;\n    font-size: 20.0 em;\n    -ms-flex-pack: center;\n        justify-content: center;\n    text-align: center;\n    font-family: 'Oswald', sans-serif;\n`;\nexport const RoundedPicture = Styled.img`\n    margin-left: auto;\n    margin-right: auto; \n    background-image: url(${props => props.picture});\n    width: 400px;\n    height: 400px;\n    background-size: cover;\n    background-position: top center;\n    border-radius: 100%;\n`;\n\n","import React from \"react\";\n\nimport { HomeWrapper, RoundedPicture} from './HomeStyledComponents';\nimport image from './background2.jpg';\nimport cover_red from './STARFIGHTER-cover-red.jpg';\nimport band1 from './band-pic1.png';\n\nimport { MainContent } from \"./HomeStyledComponents\";\nimport { Title } from \"./HomeStyledComponents\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\n\n\n\n\nexport const Home = () => (\n   \n        <HomeWrapper>\n            <MainContent>\n                <Title><h1>Starfighter</h1></Title>\n                <Container>\n                <Row>\n                    <Col>\n                        <RoundedPicture picture={band1} />\n                    </Col>\n                    <Col>   \n                         We're a cool grungy punk band from OKC!\n                    </Col>\n                </Row>\n               \n                </Container>\n            </MainContent>\n       </HomeWrapper>\n       \n);","import React from \"react\";\n\nimport { HomeWrapper} from './HomeStyledComponents';\nimport { MainContent } from \"./HomeStyledComponents\";\nimport { Title } from \"./HomeStyledComponents\";\n\n\n\n\n\nexport const UpcomingDates = () => (\n    <HomeWrapper>\n        <MainContent>\n        <Title><h1>Upcoming Dates</h1></Title>\n        <p>We dont currently have any upcoming shows :(</p>\n        \n        </MainContent>\n       </HomeWrapper>\n);","import React from \"react\";\n\nimport { HomeWrapper} from './HomeStyledComponents';\nimport headerImage from './header-bar.png';\nimport cover_red from './STARFIGHTER-cover-red.jpg';\nimport band1 from './band-pic1.png';\n\nimport { MainContent } from \"./HomeStyledComponents\";\nimport { Title } from \"./HomeStyledComponents\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\n\n\n\n\nexport const Header = () => (\n   \n        <HomeWrapper>\n            <img src={headerImage} width=\"100%\" height=\"100%\"/>\n       </HomeWrapper>\n       \n);","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Home } from './components/Home';\nimport image from './background2.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { UpcomingDates } from \"./components/UpcomingDates\";\nimport {Header} from \"./components/Header.jsx\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\n\n\nconst App = () => (<div>\n<Header></Header>\n<Home></Home>\n<UpcomingDates></UpcomingDates>\n\n  </div>\n);\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/band-pic1.6ad14693.png\";"],"sourceRoot":""}